// Code generated by mockery v2.37.0. DO NOT EDIT.

package ports

import (
	ports "github.com/rwirdemann/restkit/ports"
	mock "github.com/stretchr/testify/mock"
)

// MockYml is an autogenerated mock type for the Yml type
type MockYml struct {
	mock.Mock
}

type MockYml_Expecter struct {
	mock *mock.Mock
}

func (_m *MockYml) EXPECT() *MockYml_Expecter {
	return &MockYml_Expecter{mock: &_m.Mock}
}

// ReadConfig provides a mock function with given fields:
func (_m *MockYml) ReadConfig() (ports.Config, error) {
	ret := _m.Called()

	var r0 ports.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (ports.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ports.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ports.Config)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockYml_ReadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadConfig'
type MockYml_ReadConfig_Call struct {
	*mock.Call
}

// ReadConfig is a helper method to define mock.On call
func (_e *MockYml_Expecter) ReadConfig() *MockYml_ReadConfig_Call {
	return &MockYml_ReadConfig_Call{Call: _e.mock.On("ReadConfig")}
}

func (_c *MockYml_ReadConfig_Call) Run(run func()) *MockYml_ReadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockYml_ReadConfig_Call) Return(_a0 ports.Config, _a1 error) *MockYml_ReadConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockYml_ReadConfig_Call) RunAndReturn(run func() (ports.Config, error)) *MockYml_ReadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockYml creates a new instance of MockYml. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockYml(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockYml {
	mock := &MockYml{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
