package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"github.com/jackc/pgx/v5/pgxpool"

	"github.com/gorilla/mux"
	"gopkg.in/yaml.v2"
	"os"
)

func main() {
	c, err := readConfig()
	if err != nil {
		log.Fatal(err)
	}

	dbpool, err := pgxpool.New(context.Background(), c.DatabaseURL)
	if err != nil {
		log.Fatal(err)
	}
	defer dbpool.Close()

	router := mux.NewRouter()
    log.Printf("starting http service on port %d...", c.Port)
	err = router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
		tpl, _ := route.GetPathTemplate()
		met, _ := route.GetMethods()
		log.Println(tpl, met)
		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	err = http.ListenAndServe(fmt.Sprintf(":%d", c.Port), router)
	if err != nil {
		log.Fatal(err)
	}
}

type database struct {
	Name string `yaml:"name"`
	Url  string `yaml:"url"`
}

type config struct {
	Module      string   `yaml:"module"`
	Port        int      `yaml:"port"`
	DatabaseURL string   `yaml:"databaseURL"`
}

func readConfig() (config, error) {
	data, err := os.ReadFile(".restkit.yml")
	if err != nil {
		return config{}, err
	}

	var c config
	if err := yaml.Unmarshal(data, &c); err != nil {
		return config{}, err
	}

	return c, nil
}
