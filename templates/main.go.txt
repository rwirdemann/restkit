package main

import (
	"fmt"
    _ "github.com/lib/pq"
	"log"
	"net/http"

	"github.com/gorilla/mux"
	"gopkg.in/yaml.v2"
    "github.com/jmoiron/sqlx"
	"os"
)

func main() {
	c, err := readConfig()
	if err != nil {
		log.Fatal(err)
	}

	dataSourceName := fmt.Sprintf("user=%s dbname=%s sslmode=disable", c.Database.User, c.Database.Name)
	db, err := sqlx.Connect(c.Database.Driver, dataSourceName)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	router := mux.NewRouter()
    log.Printf("starting http service on port %d...", c.Port)
	err = router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
		tpl, _ := route.GetPathTemplate()
		met, _ := route.GetMethods()
		log.Println(tpl, met)
		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	err = http.ListenAndServe(fmt.Sprintf(":%d", c.Port), router)
	if err != nil {
		log.Fatal(err)
	}
}

type database struct {
    Driver   string `yaml:"driver"`
	Name     string `yaml:"name"`
	User     string `yaml:"user"`
	Password string `yaml:"password"`
}

type config struct {
	Module   string   `yaml:"module"`
	Port     int      `yaml:"port"`
	Database database `yaml:"database"`
}

func readConfig() (config, error) {
	data, err := os.ReadFile(".restkit.yml")
	if err != nil {
		return config{}, err
	}

	var c config
	if err := yaml.Unmarshal(data, &c); err != nil {
		return config{}, err
	}

	return c, nil
}
